// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/27/2022 16:53:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    group32_hw7
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module group32_hw7_vlg_sample_tst(
	memoryclk,
	registerclk,
	sampler_tx
);
input  memoryclk;
input  registerclk;
output sampler_tx;

reg sample;
time current_time;
always @(memoryclk or registerclk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module group32_hw7_vlg_check_tst (
	ALUresult,
	ardata,
	arresult,
	busoutput,
	DMresult,
	DMwrite,
	generalreg0out,
	generalreg1out,
	generalreg2out,
	inputregout,
	instregister,
	pcdata,
	pcresult,
	registeroutput,
	s1,
	scresult,
	sm,
	sp,
	sampler_rx
);
input [3:0] ALUresult;
input [3:0] ardata;
input [3:0] arresult;
input [3:0] busoutput;
input [3:0] DMresult;
input  DMwrite;
input [3:0] generalreg0out;
input [3:0] generalreg1out;
input [3:0] generalreg2out;
input [3:0] inputregout;
input [10:0] instregister;
input [4:0] pcdata;
input [4:0] pcresult;
input [3:0] registeroutput;
input [3:0] s1;
input [2:0] scresult;
input [4:0] sm;
input [4:0] sp;
input sampler_rx;

reg [3:0] ALUresult_expected;
reg [3:0] ardata_expected;
reg [3:0] arresult_expected;
reg [3:0] busoutput_expected;
reg [3:0] DMresult_expected;
reg  DMwrite_expected;
reg [3:0] generalreg0out_expected;
reg [3:0] generalreg1out_expected;
reg [3:0] generalreg2out_expected;
reg [3:0] inputregout_expected;
reg [10:0] instregister_expected;
reg [4:0] pcdata_expected;
reg [4:0] pcresult_expected;
reg [3:0] registeroutput_expected;
reg [3:0] s1_expected;
reg [2:0] scresult_expected;
reg [4:0] sm_expected;
reg [4:0] sp_expected;

reg [3:0] ALUresult_prev;
reg [3:0] ardata_prev;
reg [3:0] arresult_prev;
reg [3:0] busoutput_prev;
reg [3:0] DMresult_prev;
reg  DMwrite_prev;
reg [3:0] generalreg0out_prev;
reg [3:0] generalreg1out_prev;
reg [3:0] generalreg2out_prev;
reg [3:0] inputregout_prev;
reg [10:0] instregister_prev;
reg [4:0] pcdata_prev;
reg [4:0] pcresult_prev;
reg [3:0] registeroutput_prev;
reg [3:0] s1_prev;
reg [2:0] scresult_prev;
reg [4:0] sm_prev;
reg [4:0] sp_prev;

reg [3:0] ALUresult_expected_prev;
reg [3:0] ardata_expected_prev;
reg [3:0] arresult_expected_prev;
reg [3:0] busoutput_expected_prev;
reg [3:0] DMresult_expected_prev;
reg  DMwrite_expected_prev;
reg [3:0] generalreg0out_expected_prev;
reg [3:0] generalreg1out_expected_prev;
reg [3:0] generalreg2out_expected_prev;
reg [3:0] inputregout_expected_prev;
reg [10:0] instregister_expected_prev;
reg [4:0] pcdata_expected_prev;
reg [4:0] pcresult_expected_prev;
reg [3:0] registeroutput_expected_prev;
reg [3:0] s1_expected_prev;
reg [2:0] scresult_expected_prev;
reg [4:0] sm_expected_prev;
reg [4:0] sp_expected_prev;

reg [3:0] last_ALUresult_exp;
reg [3:0] last_ardata_exp;
reg [3:0] last_arresult_exp;
reg [3:0] last_busoutput_exp;
reg [3:0] last_DMresult_exp;
reg  last_DMwrite_exp;
reg [3:0] last_generalreg0out_exp;
reg [3:0] last_generalreg1out_exp;
reg [3:0] last_generalreg2out_exp;
reg [3:0] last_inputregout_exp;
reg [10:0] last_instregister_exp;
reg [4:0] last_pcdata_exp;
reg [4:0] last_pcresult_exp;
reg [3:0] last_registeroutput_exp;
reg [3:0] last_s1_exp;
reg [2:0] last_scresult_exp;
reg [4:0] last_sm_exp;
reg [4:0] last_sp_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUresult_prev = ALUresult;
	ardata_prev = ardata;
	arresult_prev = arresult;
	busoutput_prev = busoutput;
	DMresult_prev = DMresult;
	DMwrite_prev = DMwrite;
	generalreg0out_prev = generalreg0out;
	generalreg1out_prev = generalreg1out;
	generalreg2out_prev = generalreg2out;
	inputregout_prev = inputregout;
	instregister_prev = instregister;
	pcdata_prev = pcdata;
	pcresult_prev = pcresult;
	registeroutput_prev = registeroutput;
	s1_prev = s1;
	scresult_prev = scresult;
	sm_prev = sm;
	sp_prev = sp;
end

// update expected /o prevs

always @(trigger)
begin
	ALUresult_expected_prev = ALUresult_expected;
	ardata_expected_prev = ardata_expected;
	arresult_expected_prev = arresult_expected;
	busoutput_expected_prev = busoutput_expected;
	DMresult_expected_prev = DMresult_expected;
	DMwrite_expected_prev = DMwrite_expected;
	generalreg0out_expected_prev = generalreg0out_expected;
	generalreg1out_expected_prev = generalreg1out_expected;
	generalreg2out_expected_prev = generalreg2out_expected;
	inputregout_expected_prev = inputregout_expected;
	instregister_expected_prev = instregister_expected;
	pcdata_expected_prev = pcdata_expected;
	pcresult_expected_prev = pcresult_expected;
	registeroutput_expected_prev = registeroutput_expected;
	s1_expected_prev = s1_expected;
	scresult_expected_prev = scresult_expected;
	sm_expected_prev = sm_expected;
	sp_expected_prev = sp_expected;
end


// expected ALUresult[ 3 ]
initial
begin
	ALUresult_expected[3] = 1'bX;
end 
// expected ALUresult[ 2 ]
initial
begin
	ALUresult_expected[2] = 1'bX;
end 
// expected ALUresult[ 1 ]
initial
begin
	ALUresult_expected[1] = 1'bX;
end 
// expected ALUresult[ 0 ]
initial
begin
	ALUresult_expected[0] = 1'bX;
end 
// expected ardata[ 3 ]
initial
begin
	ardata_expected[3] = 1'bX;
end 
// expected ardata[ 2 ]
initial
begin
	ardata_expected[2] = 1'bX;
end 
// expected ardata[ 1 ]
initial
begin
	ardata_expected[1] = 1'bX;
end 
// expected ardata[ 0 ]
initial
begin
	ardata_expected[0] = 1'bX;
end 
// expected arresult[ 3 ]
initial
begin
	arresult_expected[3] = 1'bX;
end 
// expected arresult[ 2 ]
initial
begin
	arresult_expected[2] = 1'bX;
end 
// expected arresult[ 1 ]
initial
begin
	arresult_expected[1] = 1'bX;
end 
// expected arresult[ 0 ]
initial
begin
	arresult_expected[0] = 1'bX;
end 
// expected busoutput[ 3 ]
initial
begin
	busoutput_expected[3] = 1'bX;
end 
// expected busoutput[ 2 ]
initial
begin
	busoutput_expected[2] = 1'bX;
end 
// expected busoutput[ 1 ]
initial
begin
	busoutput_expected[1] = 1'bX;
end 
// expected busoutput[ 0 ]
initial
begin
	busoutput_expected[0] = 1'bX;
end 
// expected DMresult[ 3 ]
initial
begin
	DMresult_expected[3] = 1'bX;
end 
// expected DMresult[ 2 ]
initial
begin
	DMresult_expected[2] = 1'bX;
end 
// expected DMresult[ 1 ]
initial
begin
	DMresult_expected[1] = 1'bX;
end 
// expected DMresult[ 0 ]
initial
begin
	DMresult_expected[0] = 1'bX;
end 

// expected DMwrite
initial
begin
	DMwrite_expected = 1'bX;
end 
// expected generalreg0out[ 3 ]
initial
begin
	generalreg0out_expected[3] = 1'bX;
end 
// expected generalreg0out[ 2 ]
initial
begin
	generalreg0out_expected[2] = 1'bX;
end 
// expected generalreg0out[ 1 ]
initial
begin
	generalreg0out_expected[1] = 1'bX;
end 
// expected generalreg0out[ 0 ]
initial
begin
	generalreg0out_expected[0] = 1'bX;
end 
// expected generalreg1out[ 3 ]
initial
begin
	generalreg1out_expected[3] = 1'bX;
end 
// expected generalreg1out[ 2 ]
initial
begin
	generalreg1out_expected[2] = 1'bX;
end 
// expected generalreg1out[ 1 ]
initial
begin
	generalreg1out_expected[1] = 1'bX;
end 
// expected generalreg1out[ 0 ]
initial
begin
	generalreg1out_expected[0] = 1'bX;
end 
// expected generalreg2out[ 3 ]
initial
begin
	generalreg2out_expected[3] = 1'bX;
end 
// expected generalreg2out[ 2 ]
initial
begin
	generalreg2out_expected[2] = 1'bX;
end 
// expected generalreg2out[ 1 ]
initial
begin
	generalreg2out_expected[1] = 1'bX;
end 
// expected generalreg2out[ 0 ]
initial
begin
	generalreg2out_expected[0] = 1'bX;
end 
// expected inputregout[ 3 ]
initial
begin
	inputregout_expected[3] = 1'bX;
end 
// expected inputregout[ 2 ]
initial
begin
	inputregout_expected[2] = 1'bX;
end 
// expected inputregout[ 1 ]
initial
begin
	inputregout_expected[1] = 1'bX;
end 
// expected inputregout[ 0 ]
initial
begin
	inputregout_expected[0] = 1'bX;
end 
// expected instregister[ 10 ]
initial
begin
	instregister_expected[10] = 1'bX;
end 
// expected instregister[ 9 ]
initial
begin
	instregister_expected[9] = 1'bX;
end 
// expected instregister[ 8 ]
initial
begin
	instregister_expected[8] = 1'bX;
end 
// expected instregister[ 7 ]
initial
begin
	instregister_expected[7] = 1'bX;
end 
// expected instregister[ 6 ]
initial
begin
	instregister_expected[6] = 1'bX;
end 
// expected instregister[ 5 ]
initial
begin
	instregister_expected[5] = 1'bX;
end 
// expected instregister[ 4 ]
initial
begin
	instregister_expected[4] = 1'bX;
end 
// expected instregister[ 3 ]
initial
begin
	instregister_expected[3] = 1'bX;
end 
// expected instregister[ 2 ]
initial
begin
	instregister_expected[2] = 1'bX;
end 
// expected instregister[ 1 ]
initial
begin
	instregister_expected[1] = 1'bX;
end 
// expected instregister[ 0 ]
initial
begin
	instregister_expected[0] = 1'bX;
end 
// expected pcdata[ 4 ]
initial
begin
	pcdata_expected[4] = 1'bX;
end 
// expected pcdata[ 3 ]
initial
begin
	pcdata_expected[3] = 1'bX;
end 
// expected pcdata[ 2 ]
initial
begin
	pcdata_expected[2] = 1'bX;
end 
// expected pcdata[ 1 ]
initial
begin
	pcdata_expected[1] = 1'bX;
end 
// expected pcdata[ 0 ]
initial
begin
	pcdata_expected[0] = 1'bX;
end 
// expected pcresult[ 4 ]
initial
begin
	pcresult_expected[4] = 1'bX;
end 
// expected pcresult[ 3 ]
initial
begin
	pcresult_expected[3] = 1'bX;
end 
// expected pcresult[ 2 ]
initial
begin
	pcresult_expected[2] = 1'bX;
end 
// expected pcresult[ 1 ]
initial
begin
	pcresult_expected[1] = 1'bX;
end 
// expected pcresult[ 0 ]
initial
begin
	pcresult_expected[0] = 1'bX;
end 
// expected registeroutput[ 3 ]
initial
begin
	registeroutput_expected[3] = 1'bX;
end 
// expected registeroutput[ 2 ]
initial
begin
	registeroutput_expected[2] = 1'bX;
end 
// expected registeroutput[ 1 ]
initial
begin
	registeroutput_expected[1] = 1'bX;
end 
// expected registeroutput[ 0 ]
initial
begin
	registeroutput_expected[0] = 1'bX;
end 
// expected s1[ 3 ]
initial
begin
	s1_expected[3] = 1'bX;
end 
// expected s1[ 2 ]
initial
begin
	s1_expected[2] = 1'bX;
end 
// expected s1[ 1 ]
initial
begin
	s1_expected[1] = 1'bX;
end 
// expected s1[ 0 ]
initial
begin
	s1_expected[0] = 1'bX;
end 
// expected scresult[ 2 ]
initial
begin
	scresult_expected[2] = 1'bX;
end 
// expected scresult[ 1 ]
initial
begin
	scresult_expected[1] = 1'bX;
end 
// expected scresult[ 0 ]
initial
begin
	scresult_expected[0] = 1'bX;
end 
// expected sm[ 4 ]
initial
begin
	sm_expected[4] = 1'bX;
end 
// expected sm[ 3 ]
initial
begin
	sm_expected[3] = 1'bX;
end 
// expected sm[ 2 ]
initial
begin
	sm_expected[2] = 1'bX;
end 
// expected sm[ 1 ]
initial
begin
	sm_expected[1] = 1'bX;
end 
// expected sm[ 0 ]
initial
begin
	sm_expected[0] = 1'bX;
end 
// expected sp[ 4 ]
initial
begin
	sp_expected[4] = 1'bX;
end 
// expected sp[ 3 ]
initial
begin
	sp_expected[3] = 1'bX;
end 
// expected sp[ 2 ]
initial
begin
	sp_expected[2] = 1'bX;
end 
// expected sp[ 1 ]
initial
begin
	sp_expected[1] = 1'bX;
end 
// expected sp[ 0 ]
initial
begin
	sp_expected[0] = 1'bX;
end 
// generate trigger
always @(ALUresult_expected or ALUresult or ardata_expected or ardata or arresult_expected or arresult or busoutput_expected or busoutput or DMresult_expected or DMresult or DMwrite_expected or DMwrite or generalreg0out_expected or generalreg0out or generalreg1out_expected or generalreg1out or generalreg2out_expected or generalreg2out or inputregout_expected or inputregout or instregister_expected or instregister or pcdata_expected or pcdata or pcresult_expected or pcresult or registeroutput_expected or registeroutput or s1_expected or s1 or scresult_expected or scresult or sm_expected or sm or sp_expected or sp)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUresult = %b | expected ardata = %b | expected arresult = %b | expected busoutput = %b | expected DMresult = %b | expected DMwrite = %b | expected generalreg0out = %b | expected generalreg1out = %b | expected generalreg2out = %b | expected inputregout = %b | expected instregister = %b | expected pcdata = %b | expected pcresult = %b | expected registeroutput = %b | expected s1 = %b | expected scresult = %b | expected sm = %b | expected sp = %b | ",ALUresult_expected_prev,ardata_expected_prev,arresult_expected_prev,busoutput_expected_prev,DMresult_expected_prev,DMwrite_expected_prev,generalreg0out_expected_prev,generalreg1out_expected_prev,generalreg2out_expected_prev,inputregout_expected_prev,instregister_expected_prev,pcdata_expected_prev,pcresult_expected_prev,registeroutput_expected_prev,s1_expected_prev,scresult_expected_prev,sm_expected_prev,sp_expected_prev);
	$display("| real ALUresult = %b | real ardata = %b | real arresult = %b | real busoutput = %b | real DMresult = %b | real DMwrite = %b | real generalreg0out = %b | real generalreg1out = %b | real generalreg2out = %b | real inputregout = %b | real instregister = %b | real pcdata = %b | real pcresult = %b | real registeroutput = %b | real s1 = %b | real scresult = %b | real sm = %b | real sp = %b | ",ALUresult_prev,ardata_prev,arresult_prev,busoutput_prev,DMresult_prev,DMwrite_prev,generalreg0out_prev,generalreg1out_prev,generalreg2out_prev,inputregout_prev,instregister_prev,pcdata_prev,pcresult_prev,registeroutput_prev,s1_prev,scresult_prev,sm_prev,sp_prev);
`endif
	if (
		( ALUresult_expected_prev[0] !== 1'bx ) && ( ALUresult_prev[0] !== ALUresult_expected_prev[0] )
		&& ((ALUresult_expected_prev[0] !== last_ALUresult_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[0] = ALUresult_expected_prev[0];
	end
	if (
		( ALUresult_expected_prev[1] !== 1'bx ) && ( ALUresult_prev[1] !== ALUresult_expected_prev[1] )
		&& ((ALUresult_expected_prev[1] !== last_ALUresult_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[1] = ALUresult_expected_prev[1];
	end
	if (
		( ALUresult_expected_prev[2] !== 1'bx ) && ( ALUresult_prev[2] !== ALUresult_expected_prev[2] )
		&& ((ALUresult_expected_prev[2] !== last_ALUresult_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[2] = ALUresult_expected_prev[2];
	end
	if (
		( ALUresult_expected_prev[3] !== 1'bx ) && ( ALUresult_prev[3] !== ALUresult_expected_prev[3] )
		&& ((ALUresult_expected_prev[3] !== last_ALUresult_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[3] = ALUresult_expected_prev[3];
	end
	if (
		( ardata_expected_prev[0] !== 1'bx ) && ( ardata_prev[0] !== ardata_expected_prev[0] )
		&& ((ardata_expected_prev[0] !== last_ardata_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ardata[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ardata_expected_prev);
		$display ("     Real value = %b", ardata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ardata_exp[0] = ardata_expected_prev[0];
	end
	if (
		( ardata_expected_prev[1] !== 1'bx ) && ( ardata_prev[1] !== ardata_expected_prev[1] )
		&& ((ardata_expected_prev[1] !== last_ardata_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ardata[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ardata_expected_prev);
		$display ("     Real value = %b", ardata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ardata_exp[1] = ardata_expected_prev[1];
	end
	if (
		( ardata_expected_prev[2] !== 1'bx ) && ( ardata_prev[2] !== ardata_expected_prev[2] )
		&& ((ardata_expected_prev[2] !== last_ardata_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ardata[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ardata_expected_prev);
		$display ("     Real value = %b", ardata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ardata_exp[2] = ardata_expected_prev[2];
	end
	if (
		( ardata_expected_prev[3] !== 1'bx ) && ( ardata_prev[3] !== ardata_expected_prev[3] )
		&& ((ardata_expected_prev[3] !== last_ardata_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ardata[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ardata_expected_prev);
		$display ("     Real value = %b", ardata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ardata_exp[3] = ardata_expected_prev[3];
	end
	if (
		( arresult_expected_prev[0] !== 1'bx ) && ( arresult_prev[0] !== arresult_expected_prev[0] )
		&& ((arresult_expected_prev[0] !== last_arresult_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port arresult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", arresult_expected_prev);
		$display ("     Real value = %b", arresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_arresult_exp[0] = arresult_expected_prev[0];
	end
	if (
		( arresult_expected_prev[1] !== 1'bx ) && ( arresult_prev[1] !== arresult_expected_prev[1] )
		&& ((arresult_expected_prev[1] !== last_arresult_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port arresult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", arresult_expected_prev);
		$display ("     Real value = %b", arresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_arresult_exp[1] = arresult_expected_prev[1];
	end
	if (
		( arresult_expected_prev[2] !== 1'bx ) && ( arresult_prev[2] !== arresult_expected_prev[2] )
		&& ((arresult_expected_prev[2] !== last_arresult_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port arresult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", arresult_expected_prev);
		$display ("     Real value = %b", arresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_arresult_exp[2] = arresult_expected_prev[2];
	end
	if (
		( arresult_expected_prev[3] !== 1'bx ) && ( arresult_prev[3] !== arresult_expected_prev[3] )
		&& ((arresult_expected_prev[3] !== last_arresult_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port arresult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", arresult_expected_prev);
		$display ("     Real value = %b", arresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_arresult_exp[3] = arresult_expected_prev[3];
	end
	if (
		( busoutput_expected_prev[0] !== 1'bx ) && ( busoutput_prev[0] !== busoutput_expected_prev[0] )
		&& ((busoutput_expected_prev[0] !== last_busoutput_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port busoutput[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", busoutput_expected_prev);
		$display ("     Real value = %b", busoutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_busoutput_exp[0] = busoutput_expected_prev[0];
	end
	if (
		( busoutput_expected_prev[1] !== 1'bx ) && ( busoutput_prev[1] !== busoutput_expected_prev[1] )
		&& ((busoutput_expected_prev[1] !== last_busoutput_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port busoutput[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", busoutput_expected_prev);
		$display ("     Real value = %b", busoutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_busoutput_exp[1] = busoutput_expected_prev[1];
	end
	if (
		( busoutput_expected_prev[2] !== 1'bx ) && ( busoutput_prev[2] !== busoutput_expected_prev[2] )
		&& ((busoutput_expected_prev[2] !== last_busoutput_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port busoutput[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", busoutput_expected_prev);
		$display ("     Real value = %b", busoutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_busoutput_exp[2] = busoutput_expected_prev[2];
	end
	if (
		( busoutput_expected_prev[3] !== 1'bx ) && ( busoutput_prev[3] !== busoutput_expected_prev[3] )
		&& ((busoutput_expected_prev[3] !== last_busoutput_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port busoutput[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", busoutput_expected_prev);
		$display ("     Real value = %b", busoutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_busoutput_exp[3] = busoutput_expected_prev[3];
	end
	if (
		( DMresult_expected_prev[0] !== 1'bx ) && ( DMresult_prev[0] !== DMresult_expected_prev[0] )
		&& ((DMresult_expected_prev[0] !== last_DMresult_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMresult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMresult_expected_prev);
		$display ("     Real value = %b", DMresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMresult_exp[0] = DMresult_expected_prev[0];
	end
	if (
		( DMresult_expected_prev[1] !== 1'bx ) && ( DMresult_prev[1] !== DMresult_expected_prev[1] )
		&& ((DMresult_expected_prev[1] !== last_DMresult_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMresult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMresult_expected_prev);
		$display ("     Real value = %b", DMresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMresult_exp[1] = DMresult_expected_prev[1];
	end
	if (
		( DMresult_expected_prev[2] !== 1'bx ) && ( DMresult_prev[2] !== DMresult_expected_prev[2] )
		&& ((DMresult_expected_prev[2] !== last_DMresult_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMresult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMresult_expected_prev);
		$display ("     Real value = %b", DMresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMresult_exp[2] = DMresult_expected_prev[2];
	end
	if (
		( DMresult_expected_prev[3] !== 1'bx ) && ( DMresult_prev[3] !== DMresult_expected_prev[3] )
		&& ((DMresult_expected_prev[3] !== last_DMresult_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMresult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMresult_expected_prev);
		$display ("     Real value = %b", DMresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DMresult_exp[3] = DMresult_expected_prev[3];
	end
	if (
		( DMwrite_expected_prev !== 1'bx ) && ( DMwrite_prev !== DMwrite_expected_prev )
		&& ((DMwrite_expected_prev !== last_DMwrite_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMwrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMwrite_expected_prev);
		$display ("     Real value = %b", DMwrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DMwrite_exp = DMwrite_expected_prev;
	end
	if (
		( generalreg0out_expected_prev[0] !== 1'bx ) && ( generalreg0out_prev[0] !== generalreg0out_expected_prev[0] )
		&& ((generalreg0out_expected_prev[0] !== last_generalreg0out_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg0out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg0out_expected_prev);
		$display ("     Real value = %b", generalreg0out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_generalreg0out_exp[0] = generalreg0out_expected_prev[0];
	end
	if (
		( generalreg0out_expected_prev[1] !== 1'bx ) && ( generalreg0out_prev[1] !== generalreg0out_expected_prev[1] )
		&& ((generalreg0out_expected_prev[1] !== last_generalreg0out_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg0out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg0out_expected_prev);
		$display ("     Real value = %b", generalreg0out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_generalreg0out_exp[1] = generalreg0out_expected_prev[1];
	end
	if (
		( generalreg0out_expected_prev[2] !== 1'bx ) && ( generalreg0out_prev[2] !== generalreg0out_expected_prev[2] )
		&& ((generalreg0out_expected_prev[2] !== last_generalreg0out_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg0out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg0out_expected_prev);
		$display ("     Real value = %b", generalreg0out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_generalreg0out_exp[2] = generalreg0out_expected_prev[2];
	end
	if (
		( generalreg0out_expected_prev[3] !== 1'bx ) && ( generalreg0out_prev[3] !== generalreg0out_expected_prev[3] )
		&& ((generalreg0out_expected_prev[3] !== last_generalreg0out_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg0out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg0out_expected_prev);
		$display ("     Real value = %b", generalreg0out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_generalreg0out_exp[3] = generalreg0out_expected_prev[3];
	end
	if (
		( generalreg1out_expected_prev[0] !== 1'bx ) && ( generalreg1out_prev[0] !== generalreg1out_expected_prev[0] )
		&& ((generalreg1out_expected_prev[0] !== last_generalreg1out_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg1out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg1out_expected_prev);
		$display ("     Real value = %b", generalreg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_generalreg1out_exp[0] = generalreg1out_expected_prev[0];
	end
	if (
		( generalreg1out_expected_prev[1] !== 1'bx ) && ( generalreg1out_prev[1] !== generalreg1out_expected_prev[1] )
		&& ((generalreg1out_expected_prev[1] !== last_generalreg1out_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg1out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg1out_expected_prev);
		$display ("     Real value = %b", generalreg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_generalreg1out_exp[1] = generalreg1out_expected_prev[1];
	end
	if (
		( generalreg1out_expected_prev[2] !== 1'bx ) && ( generalreg1out_prev[2] !== generalreg1out_expected_prev[2] )
		&& ((generalreg1out_expected_prev[2] !== last_generalreg1out_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg1out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg1out_expected_prev);
		$display ("     Real value = %b", generalreg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_generalreg1out_exp[2] = generalreg1out_expected_prev[2];
	end
	if (
		( generalreg1out_expected_prev[3] !== 1'bx ) && ( generalreg1out_prev[3] !== generalreg1out_expected_prev[3] )
		&& ((generalreg1out_expected_prev[3] !== last_generalreg1out_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg1out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg1out_expected_prev);
		$display ("     Real value = %b", generalreg1out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_generalreg1out_exp[3] = generalreg1out_expected_prev[3];
	end
	if (
		( generalreg2out_expected_prev[0] !== 1'bx ) && ( generalreg2out_prev[0] !== generalreg2out_expected_prev[0] )
		&& ((generalreg2out_expected_prev[0] !== last_generalreg2out_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg2out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg2out_expected_prev);
		$display ("     Real value = %b", generalreg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_generalreg2out_exp[0] = generalreg2out_expected_prev[0];
	end
	if (
		( generalreg2out_expected_prev[1] !== 1'bx ) && ( generalreg2out_prev[1] !== generalreg2out_expected_prev[1] )
		&& ((generalreg2out_expected_prev[1] !== last_generalreg2out_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg2out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg2out_expected_prev);
		$display ("     Real value = %b", generalreg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_generalreg2out_exp[1] = generalreg2out_expected_prev[1];
	end
	if (
		( generalreg2out_expected_prev[2] !== 1'bx ) && ( generalreg2out_prev[2] !== generalreg2out_expected_prev[2] )
		&& ((generalreg2out_expected_prev[2] !== last_generalreg2out_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg2out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg2out_expected_prev);
		$display ("     Real value = %b", generalreg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_generalreg2out_exp[2] = generalreg2out_expected_prev[2];
	end
	if (
		( generalreg2out_expected_prev[3] !== 1'bx ) && ( generalreg2out_prev[3] !== generalreg2out_expected_prev[3] )
		&& ((generalreg2out_expected_prev[3] !== last_generalreg2out_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalreg2out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalreg2out_expected_prev);
		$display ("     Real value = %b", generalreg2out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_generalreg2out_exp[3] = generalreg2out_expected_prev[3];
	end
	if (
		( inputregout_expected_prev[0] !== 1'bx ) && ( inputregout_prev[0] !== inputregout_expected_prev[0] )
		&& ((inputregout_expected_prev[0] !== last_inputregout_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inputregout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inputregout_expected_prev);
		$display ("     Real value = %b", inputregout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_inputregout_exp[0] = inputregout_expected_prev[0];
	end
	if (
		( inputregout_expected_prev[1] !== 1'bx ) && ( inputregout_prev[1] !== inputregout_expected_prev[1] )
		&& ((inputregout_expected_prev[1] !== last_inputregout_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inputregout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inputregout_expected_prev);
		$display ("     Real value = %b", inputregout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_inputregout_exp[1] = inputregout_expected_prev[1];
	end
	if (
		( inputregout_expected_prev[2] !== 1'bx ) && ( inputregout_prev[2] !== inputregout_expected_prev[2] )
		&& ((inputregout_expected_prev[2] !== last_inputregout_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inputregout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inputregout_expected_prev);
		$display ("     Real value = %b", inputregout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_inputregout_exp[2] = inputregout_expected_prev[2];
	end
	if (
		( inputregout_expected_prev[3] !== 1'bx ) && ( inputregout_prev[3] !== inputregout_expected_prev[3] )
		&& ((inputregout_expected_prev[3] !== last_inputregout_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inputregout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inputregout_expected_prev);
		$display ("     Real value = %b", inputregout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_inputregout_exp[3] = inputregout_expected_prev[3];
	end
	if (
		( instregister_expected_prev[0] !== 1'bx ) && ( instregister_prev[0] !== instregister_expected_prev[0] )
		&& ((instregister_expected_prev[0] !== last_instregister_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instregister[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instregister_expected_prev);
		$display ("     Real value = %b", instregister_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instregister_exp[0] = instregister_expected_prev[0];
	end
	if (
		( instregister_expected_prev[1] !== 1'bx ) && ( instregister_prev[1] !== instregister_expected_prev[1] )
		&& ((instregister_expected_prev[1] !== last_instregister_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instregister[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instregister_expected_prev);
		$display ("     Real value = %b", instregister_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instregister_exp[1] = instregister_expected_prev[1];
	end
	if (
		( instregister_expected_prev[2] !== 1'bx ) && ( instregister_prev[2] !== instregister_expected_prev[2] )
		&& ((instregister_expected_prev[2] !== last_instregister_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instregister[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instregister_expected_prev);
		$display ("     Real value = %b", instregister_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instregister_exp[2] = instregister_expected_prev[2];
	end
	if (
		( instregister_expected_prev[3] !== 1'bx ) && ( instregister_prev[3] !== instregister_expected_prev[3] )
		&& ((instregister_expected_prev[3] !== last_instregister_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instregister[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instregister_expected_prev);
		$display ("     Real value = %b", instregister_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instregister_exp[3] = instregister_expected_prev[3];
	end
	if (
		( instregister_expected_prev[4] !== 1'bx ) && ( instregister_prev[4] !== instregister_expected_prev[4] )
		&& ((instregister_expected_prev[4] !== last_instregister_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instregister[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instregister_expected_prev);
		$display ("     Real value = %b", instregister_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instregister_exp[4] = instregister_expected_prev[4];
	end
	if (
		( instregister_expected_prev[5] !== 1'bx ) && ( instregister_prev[5] !== instregister_expected_prev[5] )
		&& ((instregister_expected_prev[5] !== last_instregister_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instregister[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instregister_expected_prev);
		$display ("     Real value = %b", instregister_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instregister_exp[5] = instregister_expected_prev[5];
	end
	if (
		( instregister_expected_prev[6] !== 1'bx ) && ( instregister_prev[6] !== instregister_expected_prev[6] )
		&& ((instregister_expected_prev[6] !== last_instregister_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instregister[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instregister_expected_prev);
		$display ("     Real value = %b", instregister_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instregister_exp[6] = instregister_expected_prev[6];
	end
	if (
		( instregister_expected_prev[7] !== 1'bx ) && ( instregister_prev[7] !== instregister_expected_prev[7] )
		&& ((instregister_expected_prev[7] !== last_instregister_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instregister[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instregister_expected_prev);
		$display ("     Real value = %b", instregister_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instregister_exp[7] = instregister_expected_prev[7];
	end
	if (
		( instregister_expected_prev[8] !== 1'bx ) && ( instregister_prev[8] !== instregister_expected_prev[8] )
		&& ((instregister_expected_prev[8] !== last_instregister_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instregister[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instregister_expected_prev);
		$display ("     Real value = %b", instregister_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instregister_exp[8] = instregister_expected_prev[8];
	end
	if (
		( instregister_expected_prev[9] !== 1'bx ) && ( instregister_prev[9] !== instregister_expected_prev[9] )
		&& ((instregister_expected_prev[9] !== last_instregister_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instregister[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instregister_expected_prev);
		$display ("     Real value = %b", instregister_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instregister_exp[9] = instregister_expected_prev[9];
	end
	if (
		( instregister_expected_prev[10] !== 1'bx ) && ( instregister_prev[10] !== instregister_expected_prev[10] )
		&& ((instregister_expected_prev[10] !== last_instregister_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instregister[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instregister_expected_prev);
		$display ("     Real value = %b", instregister_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instregister_exp[10] = instregister_expected_prev[10];
	end
	if (
		( pcdata_expected_prev[0] !== 1'bx ) && ( pcdata_prev[0] !== pcdata_expected_prev[0] )
		&& ((pcdata_expected_prev[0] !== last_pcdata_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcdata[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcdata_expected_prev);
		$display ("     Real value = %b", pcdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pcdata_exp[0] = pcdata_expected_prev[0];
	end
	if (
		( pcdata_expected_prev[1] !== 1'bx ) && ( pcdata_prev[1] !== pcdata_expected_prev[1] )
		&& ((pcdata_expected_prev[1] !== last_pcdata_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcdata[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcdata_expected_prev);
		$display ("     Real value = %b", pcdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pcdata_exp[1] = pcdata_expected_prev[1];
	end
	if (
		( pcdata_expected_prev[2] !== 1'bx ) && ( pcdata_prev[2] !== pcdata_expected_prev[2] )
		&& ((pcdata_expected_prev[2] !== last_pcdata_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcdata[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcdata_expected_prev);
		$display ("     Real value = %b", pcdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pcdata_exp[2] = pcdata_expected_prev[2];
	end
	if (
		( pcdata_expected_prev[3] !== 1'bx ) && ( pcdata_prev[3] !== pcdata_expected_prev[3] )
		&& ((pcdata_expected_prev[3] !== last_pcdata_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcdata[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcdata_expected_prev);
		$display ("     Real value = %b", pcdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pcdata_exp[3] = pcdata_expected_prev[3];
	end
	if (
		( pcdata_expected_prev[4] !== 1'bx ) && ( pcdata_prev[4] !== pcdata_expected_prev[4] )
		&& ((pcdata_expected_prev[4] !== last_pcdata_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcdata[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcdata_expected_prev);
		$display ("     Real value = %b", pcdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pcdata_exp[4] = pcdata_expected_prev[4];
	end
	if (
		( pcresult_expected_prev[0] !== 1'bx ) && ( pcresult_prev[0] !== pcresult_expected_prev[0] )
		&& ((pcresult_expected_prev[0] !== last_pcresult_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcresult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcresult_expected_prev);
		$display ("     Real value = %b", pcresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcresult_exp[0] = pcresult_expected_prev[0];
	end
	if (
		( pcresult_expected_prev[1] !== 1'bx ) && ( pcresult_prev[1] !== pcresult_expected_prev[1] )
		&& ((pcresult_expected_prev[1] !== last_pcresult_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcresult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcresult_expected_prev);
		$display ("     Real value = %b", pcresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcresult_exp[1] = pcresult_expected_prev[1];
	end
	if (
		( pcresult_expected_prev[2] !== 1'bx ) && ( pcresult_prev[2] !== pcresult_expected_prev[2] )
		&& ((pcresult_expected_prev[2] !== last_pcresult_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcresult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcresult_expected_prev);
		$display ("     Real value = %b", pcresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcresult_exp[2] = pcresult_expected_prev[2];
	end
	if (
		( pcresult_expected_prev[3] !== 1'bx ) && ( pcresult_prev[3] !== pcresult_expected_prev[3] )
		&& ((pcresult_expected_prev[3] !== last_pcresult_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcresult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcresult_expected_prev);
		$display ("     Real value = %b", pcresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcresult_exp[3] = pcresult_expected_prev[3];
	end
	if (
		( pcresult_expected_prev[4] !== 1'bx ) && ( pcresult_prev[4] !== pcresult_expected_prev[4] )
		&& ((pcresult_expected_prev[4] !== last_pcresult_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcresult[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcresult_expected_prev);
		$display ("     Real value = %b", pcresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pcresult_exp[4] = pcresult_expected_prev[4];
	end
	if (
		( registeroutput_expected_prev[0] !== 1'bx ) && ( registeroutput_prev[0] !== registeroutput_expected_prev[0] )
		&& ((registeroutput_expected_prev[0] !== last_registeroutput_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registeroutput[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registeroutput_expected_prev);
		$display ("     Real value = %b", registeroutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_registeroutput_exp[0] = registeroutput_expected_prev[0];
	end
	if (
		( registeroutput_expected_prev[1] !== 1'bx ) && ( registeroutput_prev[1] !== registeroutput_expected_prev[1] )
		&& ((registeroutput_expected_prev[1] !== last_registeroutput_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registeroutput[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registeroutput_expected_prev);
		$display ("     Real value = %b", registeroutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_registeroutput_exp[1] = registeroutput_expected_prev[1];
	end
	if (
		( registeroutput_expected_prev[2] !== 1'bx ) && ( registeroutput_prev[2] !== registeroutput_expected_prev[2] )
		&& ((registeroutput_expected_prev[2] !== last_registeroutput_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registeroutput[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registeroutput_expected_prev);
		$display ("     Real value = %b", registeroutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_registeroutput_exp[2] = registeroutput_expected_prev[2];
	end
	if (
		( registeroutput_expected_prev[3] !== 1'bx ) && ( registeroutput_prev[3] !== registeroutput_expected_prev[3] )
		&& ((registeroutput_expected_prev[3] !== last_registeroutput_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port registeroutput[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", registeroutput_expected_prev);
		$display ("     Real value = %b", registeroutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_registeroutput_exp[3] = registeroutput_expected_prev[3];
	end
	if (
		( s1_expected_prev[0] !== 1'bx ) && ( s1_prev[0] !== s1_expected_prev[0] )
		&& ((s1_expected_prev[0] !== last_s1_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_s1_exp[0] = s1_expected_prev[0];
	end
	if (
		( s1_expected_prev[1] !== 1'bx ) && ( s1_prev[1] !== s1_expected_prev[1] )
		&& ((s1_expected_prev[1] !== last_s1_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_s1_exp[1] = s1_expected_prev[1];
	end
	if (
		( s1_expected_prev[2] !== 1'bx ) && ( s1_prev[2] !== s1_expected_prev[2] )
		&& ((s1_expected_prev[2] !== last_s1_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_s1_exp[2] = s1_expected_prev[2];
	end
	if (
		( s1_expected_prev[3] !== 1'bx ) && ( s1_prev[3] !== s1_expected_prev[3] )
		&& ((s1_expected_prev[3] !== last_s1_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_s1_exp[3] = s1_expected_prev[3];
	end
	if (
		( scresult_expected_prev[0] !== 1'bx ) && ( scresult_prev[0] !== scresult_expected_prev[0] )
		&& ((scresult_expected_prev[0] !== last_scresult_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scresult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scresult_expected_prev);
		$display ("     Real value = %b", scresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_scresult_exp[0] = scresult_expected_prev[0];
	end
	if (
		( scresult_expected_prev[1] !== 1'bx ) && ( scresult_prev[1] !== scresult_expected_prev[1] )
		&& ((scresult_expected_prev[1] !== last_scresult_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scresult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scresult_expected_prev);
		$display ("     Real value = %b", scresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_scresult_exp[1] = scresult_expected_prev[1];
	end
	if (
		( scresult_expected_prev[2] !== 1'bx ) && ( scresult_prev[2] !== scresult_expected_prev[2] )
		&& ((scresult_expected_prev[2] !== last_scresult_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scresult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scresult_expected_prev);
		$display ("     Real value = %b", scresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_scresult_exp[2] = scresult_expected_prev[2];
	end
	if (
		( sm_expected_prev[0] !== 1'bx ) && ( sm_prev[0] !== sm_expected_prev[0] )
		&& ((sm_expected_prev[0] !== last_sm_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sm[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sm_expected_prev);
		$display ("     Real value = %b", sm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_sm_exp[0] = sm_expected_prev[0];
	end
	if (
		( sm_expected_prev[1] !== 1'bx ) && ( sm_prev[1] !== sm_expected_prev[1] )
		&& ((sm_expected_prev[1] !== last_sm_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sm[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sm_expected_prev);
		$display ("     Real value = %b", sm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_sm_exp[1] = sm_expected_prev[1];
	end
	if (
		( sm_expected_prev[2] !== 1'bx ) && ( sm_prev[2] !== sm_expected_prev[2] )
		&& ((sm_expected_prev[2] !== last_sm_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sm[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sm_expected_prev);
		$display ("     Real value = %b", sm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_sm_exp[2] = sm_expected_prev[2];
	end
	if (
		( sm_expected_prev[3] !== 1'bx ) && ( sm_prev[3] !== sm_expected_prev[3] )
		&& ((sm_expected_prev[3] !== last_sm_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sm[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sm_expected_prev);
		$display ("     Real value = %b", sm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_sm_exp[3] = sm_expected_prev[3];
	end
	if (
		( sm_expected_prev[4] !== 1'bx ) && ( sm_prev[4] !== sm_expected_prev[4] )
		&& ((sm_expected_prev[4] !== last_sm_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sm[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sm_expected_prev);
		$display ("     Real value = %b", sm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_sm_exp[4] = sm_expected_prev[4];
	end
	if (
		( sp_expected_prev[0] !== 1'bx ) && ( sp_prev[0] !== sp_expected_prev[0] )
		&& ((sp_expected_prev[0] !== last_sp_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sp_expected_prev);
		$display ("     Real value = %b", sp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_sp_exp[0] = sp_expected_prev[0];
	end
	if (
		( sp_expected_prev[1] !== 1'bx ) && ( sp_prev[1] !== sp_expected_prev[1] )
		&& ((sp_expected_prev[1] !== last_sp_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sp_expected_prev);
		$display ("     Real value = %b", sp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_sp_exp[1] = sp_expected_prev[1];
	end
	if (
		( sp_expected_prev[2] !== 1'bx ) && ( sp_prev[2] !== sp_expected_prev[2] )
		&& ((sp_expected_prev[2] !== last_sp_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sp_expected_prev);
		$display ("     Real value = %b", sp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_sp_exp[2] = sp_expected_prev[2];
	end
	if (
		( sp_expected_prev[3] !== 1'bx ) && ( sp_prev[3] !== sp_expected_prev[3] )
		&& ((sp_expected_prev[3] !== last_sp_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sp_expected_prev);
		$display ("     Real value = %b", sp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_sp_exp[3] = sp_expected_prev[3];
	end
	if (
		( sp_expected_prev[4] !== 1'bx ) && ( sp_prev[4] !== sp_expected_prev[4] )
		&& ((sp_expected_prev[4] !== last_sp_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sp[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sp_expected_prev);
		$display ("     Real value = %b", sp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_sp_exp[4] = sp_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#8000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module group32_hw7_vlg_vec_tst();
// constants                                           
// general purpose registers
reg memoryclk;
reg registerclk;
// wires                                               
wire [3:0] ALUresult;
wire [3:0] ardata;
wire [3:0] arresult;
wire [3:0] busoutput;
wire [3:0] DMresult;
wire DMwrite;
wire [3:0] generalreg0out;
wire [3:0] generalreg1out;
wire [3:0] generalreg2out;
wire [3:0] inputregout;
wire [10:0] instregister;
wire [4:0] pcdata;
wire [4:0] pcresult;
wire [3:0] registeroutput;
wire [3:0] s1;
wire [2:0] scresult;
wire [4:0] sm;
wire [4:0] sp;

wire sampler;                             

// assign statements (if any)                          
group32_hw7 i1 (
// port map - connection between master ports and signals/registers   
	.ALUresult(ALUresult),
	.ardata(ardata),
	.arresult(arresult),
	.busoutput(busoutput),
	.DMresult(DMresult),
	.DMwrite(DMwrite),
	.generalreg0out(generalreg0out),
	.generalreg1out(generalreg1out),
	.generalreg2out(generalreg2out),
	.inputregout(inputregout),
	.instregister(instregister),
	.memoryclk(memoryclk),
	.pcdata(pcdata),
	.pcresult(pcresult),
	.registerclk(registerclk),
	.registeroutput(registeroutput),
	.s1(s1),
	.scresult(scresult),
	.sm(sm),
	.sp(sp)
);

// memoryclk
initial
begin
	repeat(53)
	begin
		memoryclk = 1'b0;
		memoryclk = #75000 1'b1;
		# 75000;
	end
	memoryclk = 1'b0;
end 

// registerclk
always
begin
	registerclk = 1'b0;
	registerclk = #25000 1'b1;
	#25000;
end 

group32_hw7_vlg_sample_tst tb_sample (
	.memoryclk(memoryclk),
	.registerclk(registerclk),
	.sampler_tx(sampler)
);

group32_hw7_vlg_check_tst tb_out(
	.ALUresult(ALUresult),
	.ardata(ardata),
	.arresult(arresult),
	.busoutput(busoutput),
	.DMresult(DMresult),
	.DMwrite(DMwrite),
	.generalreg0out(generalreg0out),
	.generalreg1out(generalreg1out),
	.generalreg2out(generalreg2out),
	.inputregout(inputregout),
	.instregister(instregister),
	.pcdata(pcdata),
	.pcresult(pcresult),
	.registeroutput(registeroutput),
	.s1(s1),
	.scresult(scresult),
	.sm(sm),
	.sp(sp),
	.sampler_rx(sampler)
);
endmodule

